(() => {
  // DOM
  const c = document.getElementById('game');
  const ctx = c.getContext('2d');
  const levelTitle = document.getElementById('levelTitle');
  const timerEl = document.getElementById('timer');
  const hintEl = document.getElementById('hint');
  const sumEl = document.getElementById('summary');
  const sumTitle = document.getElementById('summaryTitle');
  const sumText = document.getElementById('sumText');
  const restartBtn = document.getElementById('restart');

  const T = window.TEXT || {};
  const CFG = window.CONFIG || {};

  hintEl.textContent = T.hint || "";
  sumTitle.textContent = T.end_title || "–ö–æ–Ω–µ—Ü";
  restartBtn.textContent = T.restart_btn || "üîÑ –ï—â—ë —Ä–∞–∑";

  // -------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ----------
  const TILE = CFG.tile ?? 32;
  const SPEED = CFG.playerSpeed ?? 3.2;
  const WOBBLE = CFG.doodleWobble ?? 0.9;

  const ARROW_STEP = CFG.arrowStep ?? 3;
  const ARROW_LOOK = CFG.arrowLookAhead ?? 2;
  const ARROW_R = CFG.arrowActiveRadius ?? 140;
  const ARROW_MAX_A = CFG.arrowMaxAlpha ?? 0.95;

  const LEVELS = {
    house: { name: T.level_house || "–î–æ–º", size: CFG.houseSize ?? [15,11] },
    yard:  { name: T.level_yard  || "–î–≤–æ—Ä", size: CFG.yardSize  ?? [31,17] },
    mouth: { name: T.level_mouth || "–í–æ —Ä—Ç—É –≥–æ–ª—É–±—è", size: [25, 15] }
  };

  // -------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------
  let current = 'house';
  let maze = null;        // {walls, cols, rows, w, h}
  let exitCell = null;    // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ "—Å—Ç–µ–Ω–Ω–æ–π" —Å–µ—Ç–∫–µ
  let pathCells = [];     // –ø—É—Ç—å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å—Ç–µ–Ω-—Å–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–ª–µ—Ç–∫–∏)
  let arrows = [];        // {x,y,ang,alpha}
  let player = { x: TILE*1.5, y: TILE*1.5, r: 10, vx:0, vy:0 };
  let startTime = performance.now();
  let running = true;

  // –í–≤–æ–¥
  const keys = {up:false,down:false,left:false,right:false};
  addEventListener('keydown', e=>{
    if(e.code==='ArrowUp'||e.code==='KeyW') keys.up=true;
    if(e.code==='ArrowDown'||e.code==='KeyS') keys.down=true;
    if(e.code==='ArrowLeft'||e.code==='KeyA') keys.left=true;
    if(e.code==='ArrowRight'||e.code==='KeyD') keys.right=true;
    if(e.code==='KeyR') loadLevel(current);            // —Ä–µ—Å—Ç–∞—Ä—Ç —É—Ä–æ–≤–Ω—è
    if(e.code==='KeyM') loadLevel('house', true);      // –ø–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç
  });
  addEventListener('keyup', e=>{
    if(e.code==='ArrowUp'||e.code==='KeyW') keys.up=false;
    if(e.code==='ArrowDown'||e.code==='KeyS') keys.down=false;
    if(e.code==='ArrowLeft'||e.code==='KeyA') keys.left=false;
    if(e.code==='ArrowRight'||e.code==='KeyD') keys.right=false;
  });
  restartBtn.addEventListener('click', ()=>loadLevel('house', true));

  // -------- –£—Ç–∏–ª–∏—Ç—ã ----------
  const clamp = (v,a,b)=> Math.max(a, Math.min(b, v));
  const dist = (x1,y1,x2,y2)=> Math.hypot(x1-x2, y1-y2);
  const cellSize = ()=> TILE/2;
  const toWorld = (cx,cy)=> ({ x: cx*cellSize(), y: cy*cellSize() });

  // -------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (DFS) ----------
  function genMaze(cols, rows) {
    // walls[y][x]: 1 ‚Äî —Å—Ç–µ–Ω–∞, 0 ‚Äî –ø—Ä–æ—Ö–æ–¥; –∫–ª–µ—Ç–∫–∏ –Ω–∞ –Ω–µ—á—ë—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    const w = cols*2+1, h = rows*2+1;
    const walls = Array.from({length:h}, (_,y)=>Array.from({length:w}, (_,x)=> (x%2===1 && y%2===1 ? 0 : 1)));
    const vis = Array.from({length:rows}, ()=>Array(cols).fill(false));
    function carve(cx, cy){
      vis[cy][cx] = true;
      const dirs = [[1,0],[-1,0],[0,1],[0,-1]].sort(()=>Math.random()-0.5);
      for(const [dx,dy] of dirs){
        const nx = cx+dx, ny = cy+dy;
        if(nx<0||ny<0||nx>=cols||ny>=rows||vis[ny][nx]) continue;
        // –ø—Ä–æ–ª–∞–º—ã–≤–∞–µ–º —Å—Ç–µ–Ω—É –º–µ–∂–¥—É (cx,cy) –∏ (nx,ny) ‚Äî —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (odd,odd) +- (1,0)/(0,1)
        walls[cy*2+1+dy][cx*2+1+dx] = 0;
        carve(nx,ny);
      }
    }
    carve(0,0);
    return walls;
  }

  // -------- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ (BFS –ø–æ –∫–ª–µ—Ç–∫–∞–º) ----------
  function buildPath(){
    if(!maze) { pathCells = []; return; }
    const start = {x:1, y:1};                         // –∫–ª–µ—Ç–∫–∞ (odd,odd)
    const goal  = {x:maze.w-2, y:maze.h-2};           // –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
    const Q = [start];
    const prev = new Map();                            // key "x,y" -> "px,py"
    const key = (x,y)=> `${x},${y}`;
    prev.set(key(start.x,start.y), null);

    const dirs = [[2,0],[-2,0],[0,2],[0,-2]];
    while(Q.length){
      const cur = Q.shift();
      if(cur.x===goal.x && cur.y===goal.y) break;
      for(const [dx,dy] of dirs){
        const nx = cur.x+dx, ny = cur.y+dy;
        if(nx<=0||ny<=0||nx>=maze.w-1||ny>=maze.h-1) continue;
        // –º–µ–∂–¥—É –∫–ª–µ—Ç–∫–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ¬´–¥—ã—Ä–∞¬ª (–ø—Ä–æ—Ö–æ–¥): —Å—Ç–µ–Ω–∞ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —à–∞–≥–µ == 0
        const wx = cur.x + Math.sign(dx), wy = cur.y + Math.sign(dy);
        if(maze.walls[wy][wx]!==0) continue;
        if(maze.walls[ny][nx]!==0) continue; // —Å–æ—Å–µ–¥ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–µ—Ç–∫–æ–π (0)
        const k = key(nx,ny);
        if(!prev.has(k)){ prev.set(k, key(cur.x,cur.y)); Q.push({x:nx,y:ny}); }
      }
    }

    // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –º–∞—Ä—à—Ä—É—Ç
    const out = [];
    let k = key(goal.x, goal.y);
    if(!prev.has(k)){ pathCells = []; return; } // –Ω–∞ –≤—Å—è–∫–∏–π
    while(k){
      const [x,y] = k.split(',').map(Number);
      out.push({x,y});
      k = prev.get(k);
    }
    out.reverse();
    pathCells = out;
  }

  // -------- –°—Ç—Ä–µ–ª–∫–∏ –ø–æ –ø—É—Ç–∏ ----------
  function buildArrows(){
    arrows = [];
    if(!pathCells.length){
      // —Å—Ü–µ–Ω–∞ ¬´—Ä–æ—Ç¬ª ‚Äî –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –∫ –ø–∞—Å—Ç–∏
      if(current==='mouth'){
        arrows.push({ x:c.width-200, y:c.height/2-20, ang:0, alpha:0 });
      }
      return;
    }
    for(let i=0; i<pathCells.length-1; i+=ARROW_STEP){
      const a = pathCells[i];
      const b = pathCells[Math.min(i+ARROW_LOOK, pathCells.length-1)];
      const wa = toWorld(a.x+0.5, a.y+0.5);
      const wb = toWorld(b.x+0.5, b.y+0.5);
      const ang = Math.atan2(wb.y - wa.y, wb.x - wa.x);
      arrows.push({ x:wa.x, y:wa.y, ang, alpha:0 });
    }
  }

  function updateArrows(dt){
    for(const ar of arrows){
      // –í —Å—Ü–µ–Ω–µ ¬´—Ä–æ—Ç¬ª –ø—Ä–æ—Å—Ç–æ —Ç—è–Ω–µ–º—Å—è –∫ –ø–∞—Å—Ç–∏ —Å–ø—Ä–∞–≤–∞
      if(!maze && current==='mouth'){
        ar.ang = 0; // –≤–ø—Ä–∞–≤–æ
      }
      const d = dist(player.x, player.y, ar.x, ar.y);
      const target = d < ARROW_R ? ARROW_MAX_A : 0.15; // –¥–∞–ª–µ–∫–æ ‚Äî —Å–ª–∞–±–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
      ar.alpha += (target - ar.alpha) * Math.min(1, dt/120);
    }
  }

  function drawArrow(ar){
    if(ar.alpha <= 0.02) return;
    ctx.save();
    ctx.globalAlpha = ar.alpha;
    ctx.translate(ar.x, ar.y);
    ctx.rotate(ar.ang);

    // ¬´–ø–∏–ª–æ—Ç–∫–∞¬ª-—Å—Ç—Ä–µ–ª–∫–∞
    const w = 26, h = 16;
    // —Ç–µ–Ω—å
    ctx.fillStyle='rgba(0,0,0,.18)';
    ctx.beginPath(); ctx.ellipse(-2, h*0.6, w*0.6, 4, 0, 0, Math.PI*2); ctx.fill();

    // —Ç–µ–ª–æ
    const grad = ctx.createLinearGradient(0,-h,0,h);
    grad.addColorStop(0,'#60a5fa');
    grad.addColorStop(1,'#2563eb');
    ctx.fillStyle = grad;
    ctx.beginPath();
    ctx.moveTo(-w*0.2, -h*0.6);
    ctx.lineTo(w*0.6, 0);
    ctx.lineTo(-w*0.2, h*0.6);
    ctx.closePath();
    ctx.fill();

    // –±–µ–ª–∞—è –∫—Ä–æ–º–∫–∞
    ctx.strokeStyle='rgba(255,255,255,.7)';
    ctx.lineWidth=2;
    ctx.beginPath();
    ctx.moveTo(-w*0.15, -h*0.5);
    ctx.lineTo(w*0.5, 0);
    ctx.lineTo(-w*0.15, h*0.5);
    ctx.stroke();

    ctx.restore();
  }

  // -------- –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π ----------
  function loadLevel(name, hard=false){
    current = name;
    levelTitle.textContent = LEVELS[name].name;
    if(hard) startTime = performance.now();

    if(name==='mouth'){
      maze = null;
      player.x = TILE*1.5; player.y = c.height/2;
      pathCells = [];
      buildArrows();
      return;
    }

    // –≥–µ–Ω–µ—Ä–∏–º –ª–∞–±–∏—Ä–∏–Ω—Ç
    const [cols, rows] = LEVELS[name].size;
    const walls = genMaze(cols, rows);
    maze = { walls, cols, rows, w: cols*2+1, h: rows*2+1 };

    // –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥
    exitCell = { x: maze.w-2, y: maze.h-2 };
    player.x = TILE*1.5; player.y = TILE*1.5;

    // –ø—É—Ç—å –∏ —Å—Ç—Ä–µ–ª–∫–∏
    buildPath();
    buildArrows();
  }

  // -------- –ö–æ–ª–ª–∏–∑–∏–∏ —Å–æ —Å—Ç–µ–Ω–∞–º–∏ ----------
  function collideMaze(px, py, r){
    if(!maze) return {x:px, y:py};
    const cell = cellSize();
    const minX = Math.floor((px - r)/cell);
    const maxX = Math.floor((px + r)/cell);
    const minY = Math.floor((py - r)/cell);
    const maxY = Math.floor((py + r)/cell);
    let x = px, y = py;

    for(let cy=minY; cy<=maxY; cy++){
      for(let cx=minX; cx<=maxX; cx++){
        if(cy<0||cx<0||cy>=maze.h||cx>=maze.w) continue;
        if(maze.walls[cy][cx]===1){
          const wx = cx*cell, wy = cy*cell, ww = cell, wh = cell;
          if(x > wx && x < wx+ww){
            if(py < wy) y = Math.min(y, wy - r);
            else if(py > wy+wh) y = Math.max(y, wy+wh + r);
          }
          if(y > wy && y < wy+wh){
            if(px < wx) x = Math.min(x, wx - r);
            else if(px > wx+ww) x = Math.max(x, wx+ww + r);
          }
        }
      }
    }
    return {x,y};
  }

  // -------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ----------
  let last = performance.now();
  function update(t){
    const dt = Math.min(33, t-last); last=t;
    if(!running) return;

    // –¥–≤–∏–∂–µ–Ω–∏–µ
    const ax = (keys.right?1:0) - (keys.left?1:0);
    const ay = (keys.down?1:0) - (keys.up?1:0);
    const len = Math.hypot(ax, ay) || 1;
    player.vx = (ax/len) * SPEED;
    player.vy = (ay/len) * SPEED;

    let nx = player.x + player.vx;
    let ny = player.y + player.vy;

    const after = collideMaze(nx, ny, player.r);
    player.x = clamp(after.x, player.r, c.width - player.r);
    player.y = clamp(after.y, player.r, c.height - player.r);

    // –ø–µ—Ä–µ—Ö–æ–¥—ã
    if(maze){
      const ex = toWorld(exitCell.x+0.5, exitCell.y+0.5);
      if(dist(player.x, player.y, ex.x, ex.y) < TILE*0.6){
        if(current==='house') loadLevel('yard');
        else if(current==='yard') loadLevel('mouth');
      }
    } else if(current==='mouth'){
      if(player.x > c.width - TILE*1.8) end();
    }

    // —Å—Ç—Ä–µ–ª–∫–∏
    updateArrows(dt);

    // —Ç–∞–π–º–µ—Ä
    timerEl.textContent = ((t - startTime)/1000).toFixed(1);
  }

  // -------- –†–µ–Ω–¥–µ—Ä ----------
  function render(t){
    ctx.clearRect(0,0,c.width,c.height);

    // —Ñ–æ–Ω
    if(current==='house') drawHouseBG();
    else if(current==='yard') drawYardBG();
    else drawMouthBG();

    // –ª–∞–±–∏—Ä–∏–Ω—Ç
    if(maze) drawMaze(maze);

    // –≤—ã—Ö–æ–¥ (–¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞)
    if(maze){
      const ex = toWorld(exitCell.x, exitCell.y);
      ctx.fillStyle = current==='house' ? '#6ee7b7' : '#60a5fa';
      doodleRect(ex.x+4, ex.y+4, TILE-8, TILE-8, 6, true);
    }

    // —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ–≤–µ—Ä—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    for(const a of arrows) drawArrow(a);

    // –∏–≥—Ä–æ–∫
    drawPlayer(player);

    // —Ä–∞–º–∫–∞
    ctx.strokeStyle='rgba(0,0,0,.08)';
    ctx.lineWidth=2; ctx.strokeRect(8,8,c.width-16,c.height-16);
  }

  // -------- –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
  function doodleRect(x,y,w,h, jitter=6, fill=false){
    const j = jitter*WOBBLE;
    const k = () => (Math.random()*j - j/2);
    ctx.beginPath();
    ctx.moveTo(x+k(), y+k());
    ctx.lineTo(x+w+k(), y+k());
    ctx.lineTo(x+w+k(), y+h+k());
    ctx.lineTo(x+k(), y+h+k());
    ctx.closePath();
    if(fill) ctx.fill();
    ctx.stroke();
  }

  function drawMaze(m){
    const cell = cellSize();
    ctx.save();
    ctx.lineWidth = 3;
    for(let y=0;y<m.h;y++){
      for(let x=0;x<m.w;x++){
        if(m.walls[y][x]===1){
          const px = x*cell, py = y*cell;
          ctx.fillStyle = (current==='house') ? '#eae7ff' : '#e8f7ea';
          ctx.fillRect(px,py,cell,cell);
          ctx.strokeStyle = (current==='house') ? '#6b5bd6' : '#28a34e';
          doodleRect(px,py,cell,cell,4,false);
        }
      }
    }
    ctx.restore();
  }

  function drawHouseBG(){
    const g = ctx.createLinearGradient(0,0,0,c.height);
    g.addColorStop(0,'#fff'); g.addColorStop(1,'#f7f9fc');
    ctx.fillStyle=g; ctx.fillRect(0,0,c.width,c.height);
    ctx.fillStyle='rgba(100,150,255,.12)';
    ctx.fillRect(40,40,180,110);
    ctx.fillRect(c.width-240,60,180,110);
  }
  function drawYardBG(){
    const g = ctx.createLinearGradient(0,0,0,c.height);
    g.addColorStop(0,'#e6f3ff'); g.addColorStop(1,'#d1f5e1');
    ctx.fillStyle=g; ctx.fillRect(0,0,c.width,c.height);
    ctx.fillStyle='#baf7c8'; ctx.fillRect(0,c.height-120,c.width,120);
    ctx.strokeStyle='#2a7d3b'; ctx.lineWidth=8;
    for(let i=0;i<6;i++){
      const x = 60+i*160 + Math.sin(i)*8;
      ctx.beginPath(); ctx.moveTo(x,c.height-120); ctx.lineTo(x,c.height-220); ctx.stroke();
      ctx.fillStyle='rgba(46,150,70,.6)';
      ctx.beginPath(); ctx.arc(x, c.height-240, 40+Math.random()*8, 0, Math.PI*2); ctx.fill();
    }
  }
  function drawMouthBG(){
    const sky = ctx.createLinearGradient(0,0,0,c.height);
    sky.addColorStop(0,'#e9f5ff'); sky.addColorStop(1,'#f0f7ff');
    ctx.fillStyle=sky; ctx.fillRect(0,0,c.width,c.height);
    const headX = c.width-260, headY = c.height/2 - 80;
    ctx.fillStyle='#dfe7f5';
    ctx.beginPath(); ctx.ellipse(headX, headY+120, 120, 90, 0, 0, Math.PI*2); ctx.fill();
    const hg = ctx.createRadialGradient(headX+40, headY+50, 20, headX+50, headY+70, 160);
    hg.addColorStop(0,'#f5f8ff'); hg.addColorStop(1,'#ccd9ef');
    ctx.fillStyle=hg;
    ctx.beginPath(); ctx.ellipse(headX+80, headY+70, 160, 130, 0, 0, Math.PI*2); ctx.fill();
    ctx.fillStyle='#f2b04c';
    ctx.beginPath();
    ctx.moveTo(headX+40, headY+70);
    ctx.quadraticCurveTo(c.width-40, headY-40, c.width-20, headY+20);
    ctx.quadraticCurveTo(c.width-70, headY+25, headX+40, headY+70);
    ctx.fill();
    ctx.fillStyle='#f59e0b';
    ctx.beginPath();
    ctx.moveTo(headX+46, headY+92);
    ctx.quadraticCurveTo(c.width-36, headY+150, c.width-18, headY+96);
    ctx.quadraticCurveTo(c.width-80, headY+86, headX+46, headY+92);
    ctx.fill();
    ctx.fillStyle='#0f172a';
    ctx.fillRect(c.width-110, headY+60, 80, 40); // –ø–∞—Å—Ç—å
  }
  function drawPlayer(p){
    // —Ç–µ–Ω—å
    ctx.fillStyle='rgba(0,0,0,.15)';
    ctx.beginPath(); ctx.ellipse(p.x, p.y+10, 12, 4, 0, 0, Math.PI*2); ctx.fill();
    // —Ç–µ–ª–æ
    ctx.lineWidth = 3; ctx.strokeStyle = '#4338ca'; ctx.fillStyle = '#a5b4fc';
    ctx.beginPath(); ctx.ellipse(p.x, p.y, 12, 14, 0, 0, Math.PI*2); ctx.fill(); ctx.stroke();
    // –≥–ª–∞–∑
    ctx.fillStyle='#0b1020'; ctx.beginPath(); ctx.arc(p.x+3, p.y-2, 2, 0, Math.PI*2); ctx.fill();
  }

  // -------- –ö–æ–Ω–µ—Ü/—Ü–∏–∫–ª ----------
  function end(){
    running=false;
    const time = (performance.now()-startTime)/1000;
    sumText.textContent = (T.end_text ? T.end_text(time) : `–í—Ä–µ–º—è: ${time.toFixed(1)}s`);
    sumEl.classList.remove('hidden');
  }

  function loop(t){
    update(t);
    render(t);
    if(running) requestAnimationFrame(loop);
  }

  // —Å—Ç–∞—Ä—Ç
  loadLevel('house', true);
  requestAnimationFrame(loop);
})();
